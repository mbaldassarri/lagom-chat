package it.unibo.message.dispatcher.impl;

import akka.Done;
import akka.stream.javadsl.Flow;
import it.unibo.channel.api.ChannelEvent;
import it.unibo.channel.api.ChannelService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.inject.Inject;

public class ChatMessageEventsSubscriber {

    private final Logger logger = LoggerFactory.getLogger(MessageServiceImpl.class);

    /**
     *
     * This class represents a subscriber of the ES events generated by the channel service.
     * These events are of two kind:
     * - creation of the channel
     * - updated of the channel, generally used to store a new joined user or to change the channel name
     *
     * @param channelService inject service to subscribe to the declared topics
     */
    @Inject
    public ChatMessageEventsSubscriber(ChannelService channelService) {
        channelService.createdChannelTopic()
            .subscribe()
            .atLeastOnce(Flow.fromFunction((ChannelEvent channelEvent) -> {
                logger.info("CHAT MESSAGE EVENT: new Channel created  " + channelEvent);
                return Done.getInstance();
            }));

        channelService.updatedChannelTopic()
            .subscribe()
            .atLeastOnce(Flow.fromFunction((ChannelEvent event) -> {
                        logger.info("CHAT MESSAGE EVENT: Channel updated  " + event);
                        return Done.getInstance();
                    })
            );
    }
}
